{"version":3,"sources":["accessToken.ts","CheckAuth.ts","generated/graphql.tsx","components/navbar/AnnouncementBar.tsx","images/Blank_Logo.png","components/navbar/Navbar.tsx","components/footer/CopyrightBar.tsx","images/Blank_Footer_logo.png","components/footer/Footer.tsx","components/products/Products.tsx","components/UsersOrders.tsx","components/products/ProductDetails.tsx","redux/actions/userAction.ts","components/checkout/Cart.tsx","components/checkout/Checkout.tsx","components/FAQ.tsx","components/Contact.tsx","routes/Routes.tsx","App.tsx","URI.ts","AppWrapper.tsx","redux/RootReducer.tsx","redux/ReduxStore.tsx","index.tsx"],"names":["accessToken","setAccessToken","s","getAccessToken","checkAuth","token","exp","jwtDecode","Date","now","CheckoutDocument","gql","useCheckoutMutation","baseOptions","Apollo","GetAnnouncementsDocument","GetCurrUserDocument","GetProductDocument","GetProductsDocument","GetUsersOrdersDocument","LoginDocument","ValidateCouponDocument","AnnouncementBar","data","console","log","useEffect","document","getElementById","textWrapper","innerHTML","textContent","replace","tl","anime","timeline","loop","loopBegin","style","display","loopComplete","add","targets","translateY","translateZ","opacity","easing","duration","delay","el","i","translateX","width","backgroundColor","color","className","justifyContent","getAnnouncements","length","id","map","_val","text","href","marginRight","marginLeft","Navbar","elems","querySelectorAll","M","Sidenav","init","login","handler","res","a","variables","user_id","googleId","email","profileObj","response","localStorage","setItem","refreshToken","window","location","signIn","useGoogleLogin","clientId","onSuccess","position","top","zIndex","height","src","Logo","alt","data-target","left","transform","minWidth","onClick","paddingTop","textAlign","CopyrightBar","border","marginTop","marginBottom","fontSize","fontWeight","Footer","FooterLogo","Products","loading","_t","value","scale","stagger","start","getProducts","product","margin","product_id","images","img_url","name","maxHeight","Number","price","toFixed","UsersOrders","ProductDetails","split","dispatch","useDispatch","error","to","getProduct","maxWidth","desc","type","addProductToCart","Cart","useState","refresh","quantities","state","setState","products","useSelector","productsInCart","total","quantity","flexDirection","minLength","maxLength","pattern","onBlur","e","newQuantity","target","productIndex","tmp","splice","onChange","match","CardSection","options","iconStyle","hidePostalCode","base","iconColor","fontFamily","fontSmoothing","invalid","Checkout","props","checkout","useValidateCouponMutation","validateCoupon","discountPH","setDiscountPH","getCurrUser","setEmail","setName","coupon","setCoupon","subtotal","setSubtotal","subtotalWtax","setSubtotalWtax","address","city","line1","zip","billing","setBilling","setAddress","Autocomplete","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusettes","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","Ohio","Oklahoma","Oregon","Pennsylvania","Tennessee","Texas","Utah","Vermont","Virginia","Washington","Wisconsin","Wyoming","handleSubmit","stripe","elements","card","getElement","CardElement","createToken","result","products_str","JSON","stringify","token_str","shipping_str","billing_str","shipping_info","billing_info","tmp_subtotal","tax","Math","round","minHeight","focusable","viewBox","d","fill-rule","letterSpacing","paddingBottom","htmlFor","data-error","coupon_name","classList","attributes","nodeValue","percentage","discount","toast","html","classes","FAQ","frameBorder","allow","allowFullScreen","Contact","message","setMessage","Routes","stripePromise","loadStripe","exact","path","render","App","URI","AppWrapper","pageLoader","setPageLoader","getItem","fetch","method","credentials","headers","then","json","initState","serializedState","parse","err","loadState","store","createStore","action","tmp2","push","composeWithDevTools","subscribe","saveState","getState","cache","InMemoryCache","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","setContext","authorization","next","bind","complete","catch","unsubscribe","client","ApolloClient","link","from","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","fetchAccessToken","handleFetch","handleError","warn","onError","graphQLErrors","networkError","HttpLink","uri","ReactDOM"],"mappings":"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","file":"static/js/main.d46ca720.chunk.js","sourcesContent":["export let accessToken = \"\";\r\n\r\nexport const setAccessToken = (s: string) => {\r\n    accessToken = s;\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n    return accessToken;\r\n};\r\n","import { getAccessToken } from \"./accessToken\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const checkAuth = () => {\r\n    const token = getAccessToken();\r\n    if (!token) {\r\n        return false;\r\n    }\r\n    try {\r\n        const { exp } = jwtDecode(token) as any;\r\n        if (Date.now() >= exp * 1000) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    } catch {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default checkAuth();\r\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getUsersOrders: Array<GetOrdersResponse>;\n  getOrders: Array<GetOrdersResponse>;\n  getProducts: Array<ProductsWithImages>;\n  getProduct: ProductsWithImages;\n  hello: Scalars['String'];\n  getCurrUser: Users;\n  getCoupons: Array<Coupons>;\n  getAnnouncements: Array<Announcements>;\n};\n\n\nexport type QueryGetProductArgs = {\n  product_id: Scalars['Float'];\n};\n\nexport type GetOrdersResponse = {\n  __typename?: 'GetOrdersResponse';\n  products: Array<Products>;\n  order_id: Scalars['Float'];\n  tracking_num?: Maybe<Scalars['String']>;\n};\n\nexport type Products = {\n  __typename?: 'Products';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  exp_date?: Maybe<Scalars['String']>;\n};\n\nexport type ProductsWithImages = {\n  __typename?: 'ProductsWithImages';\n  product_id: Scalars['Int'];\n  name: Scalars['String'];\n  desc: Scalars['String'];\n  price: Scalars['Int'];\n  stock: Scalars['Int'];\n  exp_date?: Maybe<Scalars['String']>;\n  images?: Maybe<Array<Images>>;\n};\n\nexport type Images = {\n  __typename?: 'Images';\n  img_id: Scalars['Float'];\n  img_url: Scalars['String'];\n  index: Scalars['Float'];\n};\n\nexport type Users = {\n  __typename?: 'Users';\n  uuid: Scalars['Float'];\n  user_id?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type Coupons = {\n  __typename?: 'Coupons';\n  coupon_id: Scalars['String'];\n  coupon_name: Scalars['String'];\n  discount?: Maybe<Scalars['Int']>;\n};\n\nexport type Announcements = {\n  __typename?: 'Announcements';\n  id: Scalars['String'];\n  text: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  checkout: Scalars['Boolean'];\n  addProduct: Scalars['String'];\n  deleteProduct: Scalars['Boolean'];\n  updateProduct: Scalars['Boolean'];\n  addImgToProduct: Scalars['Boolean'];\n  removeImgFromProduct: Scalars['Boolean'];\n  apiLogin: AuthResponse;\n  login: AuthResponse;\n  addCoupon: Scalars['Boolean'];\n  deleteCoupon: Scalars['Boolean'];\n  validateCoupon: Scalars['String'];\n  addAnnouncement: Scalars['Boolean'];\n  deleteAnnouncement: Scalars['Boolean'];\n};\n\n\nexport type MutationCheckoutArgs = {\n  coupon: Scalars['String'];\n  billing_info: Scalars['String'];\n  shipping_info: Scalars['String'];\n  products: Scalars['String'];\n  user_id: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationAddProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationDeleteProductArgs = {\n  product_id: Scalars['Float'];\n};\n\n\nexport type MutationUpdateProductArgs = {\n  stock: Scalars['Float'];\n  price: Scalars['Float'];\n  desc: Scalars['String'];\n  product_id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\n\nexport type MutationAddImgToProductArgs = {\n  product_id: Scalars['Float'];\n  img_url: Scalars['String'];\n};\n\n\nexport type MutationApiLoginArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  user_id: Scalars['String'];\n};\n\n\nexport type MutationAddCouponArgs = {\n  discount: Scalars['String'];\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationDeleteCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationValidateCouponArgs = {\n  coupon_name: Scalars['String'];\n};\n\n\nexport type MutationAddAnnouncementArgs = {\n  text: Scalars['String'];\n};\n\n\nexport type MutationDeleteAnnouncementArgs = {\n  id: Scalars['String'];\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken?: Maybe<Scalars['String']>;\n  refreshToken?: Maybe<Scalars['String']>;\n};\n\nexport type CheckoutMutationVariables = Exact<{\n  token: Scalars['String'];\n  user_id: Scalars['String'];\n  products: Scalars['String'];\n  shipping_info: Scalars['String'];\n  billing_info: Scalars['String'];\n  coupon: Scalars['String'];\n}>;\n\n\nexport type CheckoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'checkout'>\n);\n\nexport type GetAnnouncementsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetAnnouncementsQuery = (\n  { __typename?: 'Query' }\n  & { getAnnouncements: Array<(\n    { __typename?: 'Announcements' }\n    & Pick<Announcements, 'id' | 'text'>\n  )> }\n);\n\nexport type GetCurrUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetCurrUserQuery = (\n  { __typename?: 'Query' }\n  & { getCurrUser: (\n    { __typename?: 'Users' }\n    & Pick<Users, 'email' | 'uuid' | 'user_id'>\n  ) }\n);\n\nexport type GetProductQueryVariables = Exact<{\n  product_id: Scalars['Float'];\n}>;\n\n\nexport type GetProductQuery = (\n  { __typename?: 'Query' }\n  & { getProduct: (\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  ) }\n);\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = (\n  { __typename?: 'Query' }\n  & { getProducts: Array<(\n    { __typename?: 'ProductsWithImages' }\n    & Pick<ProductsWithImages, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    & { images?: Maybe<Array<(\n      { __typename?: 'Images' }\n      & Pick<Images, 'img_id' | 'img_url'>\n    )>> }\n  )> }\n);\n\nexport type GetUsersOrdersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersOrdersQuery = (\n  { __typename?: 'Query' }\n  & { getUsersOrders: Array<(\n    { __typename?: 'GetOrdersResponse' }\n    & Pick<GetOrdersResponse, 'order_id' | 'tracking_num'>\n    & { products: Array<(\n      { __typename?: 'Products' }\n      & Pick<Products, 'product_id' | 'name' | 'desc' | 'price' | 'stock' | 'exp_date'>\n    )> }\n  )> }\n);\n\nexport type LoginMutationVariables = Exact<{\n  user_id: Scalars['String'];\n  email: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken' | 'refreshToken'>\n  ) }\n);\n\nexport type ValidateCouponMutationVariables = Exact<{\n  coupon_name: Scalars['String'];\n}>;\n\n\nexport type ValidateCouponMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'validateCoupon'>\n);\n\n\nexport const CheckoutDocument = gql`\n    mutation checkout($token: String!, $user_id: String!, $products: String!, $shipping_info: String!, $billing_info: String!, $coupon: String!) {\n  checkout(\n    token: $token\n    user_id: $user_id\n    products: $products\n    shipping_info: $shipping_info\n    billing_info: $billing_info\n    coupon: $coupon\n  )\n}\n    `;\nexport type CheckoutMutationFn = Apollo.MutationFunction<CheckoutMutation, CheckoutMutationVariables>;\n\n/**\n * __useCheckoutMutation__\n *\n * To run a mutation, you first call `useCheckoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCheckoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [checkoutMutation, { data, loading, error }] = useCheckoutMutation({\n *   variables: {\n *      token: // value for 'token'\n *      user_id: // value for 'user_id'\n *      products: // value for 'products'\n *      shipping_info: // value for 'shipping_info'\n *      billing_info: // value for 'billing_info'\n *      coupon: // value for 'coupon'\n *   },\n * });\n */\nexport function useCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<CheckoutMutation, CheckoutMutationVariables>) {\n        return Apollo.useMutation<CheckoutMutation, CheckoutMutationVariables>(CheckoutDocument, baseOptions);\n      }\nexport type CheckoutMutationHookResult = ReturnType<typeof useCheckoutMutation>;\nexport type CheckoutMutationResult = Apollo.MutationResult<CheckoutMutation>;\nexport type CheckoutMutationOptions = Apollo.BaseMutationOptions<CheckoutMutation, CheckoutMutationVariables>;\nexport const GetAnnouncementsDocument = gql`\n    query getAnnouncements {\n  getAnnouncements {\n    id\n    text\n  }\n}\n    `;\n\n/**\n * __useGetAnnouncementsQuery__\n *\n * To run a query within a React component, call `useGetAnnouncementsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetAnnouncementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetAnnouncementsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetAnnouncementsQuery(baseOptions?: Apollo.QueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n        return Apollo.useQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n      }\nexport function useGetAnnouncementsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>) {\n          return Apollo.useLazyQuery<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>(GetAnnouncementsDocument, baseOptions);\n        }\nexport type GetAnnouncementsQueryHookResult = ReturnType<typeof useGetAnnouncementsQuery>;\nexport type GetAnnouncementsLazyQueryHookResult = ReturnType<typeof useGetAnnouncementsLazyQuery>;\nexport type GetAnnouncementsQueryResult = Apollo.QueryResult<GetAnnouncementsQuery, GetAnnouncementsQueryVariables>;\nexport const GetCurrUserDocument = gql`\n    query getCurrUser {\n  getCurrUser {\n    email\n    uuid\n    user_id\n  }\n}\n    `;\n\n/**\n * __useGetCurrUserQuery__\n *\n * To run a query within a React component, call `useGetCurrUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCurrUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCurrUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCurrUserQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\n        return Apollo.useQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\n      }\nexport function useGetCurrUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrUserQuery, GetCurrUserQueryVariables>) {\n          return Apollo.useLazyQuery<GetCurrUserQuery, GetCurrUserQueryVariables>(GetCurrUserDocument, baseOptions);\n        }\nexport type GetCurrUserQueryHookResult = ReturnType<typeof useGetCurrUserQuery>;\nexport type GetCurrUserLazyQueryHookResult = ReturnType<typeof useGetCurrUserLazyQuery>;\nexport type GetCurrUserQueryResult = Apollo.QueryResult<GetCurrUserQuery, GetCurrUserQueryVariables>;\nexport const GetProductDocument = gql`\n    query getProduct($product_id: Float!) {\n  getProduct(product_id: $product_id) {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductQuery__\n *\n * To run a query within a React component, call `useGetProductQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductQuery({\n *   variables: {\n *      product_id: // value for 'product_id'\n *   },\n * });\n */\nexport function useGetProductQuery(baseOptions: Apollo.QueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n        return Apollo.useQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n      }\nexport function useGetProductLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductQuery, GetProductQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductQuery, GetProductQueryVariables>(GetProductDocument, baseOptions);\n        }\nexport type GetProductQueryHookResult = ReturnType<typeof useGetProductQuery>;\nexport type GetProductLazyQueryHookResult = ReturnType<typeof useGetProductLazyQuery>;\nexport type GetProductQueryResult = Apollo.QueryResult<GetProductQuery, GetProductQueryVariables>;\nexport const GetProductsDocument = gql`\n    query getProducts {\n  getProducts {\n    product_id\n    name\n    desc\n    price\n    stock\n    exp_date\n    images {\n      img_id\n      img_url\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProductsQuery__\n *\n * To run a query within a React component, call `useGetProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetProductsQuery(baseOptions?: Apollo.QueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n        return Apollo.useQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n      }\nexport function useGetProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsQuery, GetProductsQueryVariables>) {\n          return Apollo.useLazyQuery<GetProductsQuery, GetProductsQueryVariables>(GetProductsDocument, baseOptions);\n        }\nexport type GetProductsQueryHookResult = ReturnType<typeof useGetProductsQuery>;\nexport type GetProductsLazyQueryHookResult = ReturnType<typeof useGetProductsLazyQuery>;\nexport type GetProductsQueryResult = Apollo.QueryResult<GetProductsQuery, GetProductsQueryVariables>;\nexport const GetUsersOrdersDocument = gql`\n    query getUsersOrders {\n  getUsersOrders {\n    products {\n      product_id\n      name\n      desc\n      price\n      stock\n      exp_date\n    }\n    order_id\n    tracking_num\n  }\n}\n    `;\n\n/**\n * __useGetUsersOrdersQuery__\n *\n * To run a query within a React component, call `useGetUsersOrdersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersOrdersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersOrdersQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\n        return Apollo.useQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\n      }\nexport function useGetUsersOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>) {\n          return Apollo.useLazyQuery<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>(GetUsersOrdersDocument, baseOptions);\n        }\nexport type GetUsersOrdersQueryHookResult = ReturnType<typeof useGetUsersOrdersQuery>;\nexport type GetUsersOrdersLazyQueryHookResult = ReturnType<typeof useGetUsersOrdersLazyQuery>;\nexport type GetUsersOrdersQueryResult = Apollo.QueryResult<GetUsersOrdersQuery, GetUsersOrdersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($user_id: String!, $email: String!) {\n  login(user_id: $user_id, email: $email) {\n    accessToken\n    refreshToken\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const ValidateCouponDocument = gql`\n    mutation validateCoupon($coupon_name: String!) {\n  validateCoupon(coupon_name: $coupon_name)\n}\n    `;\nexport type ValidateCouponMutationFn = Apollo.MutationFunction<ValidateCouponMutation, ValidateCouponMutationVariables>;\n\n/**\n * __useValidateCouponMutation__\n *\n * To run a mutation, you first call `useValidateCouponMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useValidateCouponMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [validateCouponMutation, { data, loading, error }] = useValidateCouponMutation({\n *   variables: {\n *      coupon_name: // value for 'coupon_name'\n *   },\n * });\n */\nexport function useValidateCouponMutation(baseOptions?: Apollo.MutationHookOptions<ValidateCouponMutation, ValidateCouponMutationVariables>) {\n        return Apollo.useMutation<ValidateCouponMutation, ValidateCouponMutationVariables>(ValidateCouponDocument, baseOptions);\n      }\nexport type ValidateCouponMutationHookResult = ReturnType<typeof useValidateCouponMutation>;\nexport type ValidateCouponMutationResult = Apollo.MutationResult<ValidateCouponMutation>;\nexport type ValidateCouponMutationOptions = Apollo.BaseMutationOptions<ValidateCouponMutation, ValidateCouponMutationVariables>;","import { FaInstagram, FaEnvelope } from \"react-icons/fa\";\r\nimport { useGetAnnouncementsQuery } from \"../../generated/graphql\";\r\nimport anime from \"animejs\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst pickIntro = () => {\r\n    const animations = [\r\n        {\r\n            targets: \".announcement-1 .letter\",\r\n            translateX: [40, 0],\r\n            translateZ: 0,\r\n            opacity: [0, 1],\r\n            easing: \"easeOutExpo\",\r\n            duration: 1200,\r\n            delay: (el, i) => 500 + 30 * i,\r\n        },\r\n    ]; //define animations here\r\n    let index = Math.floor(Math.random() * animations.length - 1 + 1);\r\n    return animations[index];\r\n};\r\n\r\nconst pickOutro = () => {\r\n    const animations = [\r\n        {\r\n            targets: \".announcement-1 .letter\",\r\n            translateY: [0, -100],\r\n            opacity: [1, 0],\r\n            easing: \"easeInExpo\",\r\n            duration: 1200,\r\n            delay: (el, i) => 100 + 30 * i,\r\n        },\r\n    ]; //define animations here\r\n    let index = Math.floor(Math.random() * animations.length - 1 + 1);\r\n    return animations[index];\r\n};\r\n\r\nconst AnnouncementBar = () => {\r\n    const { data } = useGetAnnouncementsQuery();\r\n    console.log(\"data =>\", data);\r\n\r\n    useEffect(() => {\r\n        let timelines = [] as any[];\r\n\r\n        if (!!data && !!document.getElementById(`announcement-0`)) {\r\n            var textWrapper = document.getElementById(`announcement-0`);\r\n            textWrapper!.innerHTML = textWrapper!.textContent!.replace(\r\n                /\\S/g,\r\n                \"<span class='letter'>$&</span>\"\r\n            );\r\n            var textWrapper = document.getElementById(`announcement-1`);\r\n            textWrapper!.innerHTML = textWrapper!.textContent!.replace(\r\n                /\\S/g,\r\n                \"<span class='letter'>$&</span>\"\r\n            );\r\n            var textWrapper = document.getElementById(`announcement-2`);\r\n            textWrapper!.innerHTML = textWrapper!.textContent!.replace(\r\n                /\\S/g,\r\n                \"<span class='letter'>$&</span>\"\r\n            );\r\n\r\n            let tl = 0;\r\n            anime\r\n                .timeline({\r\n                    loop: true,\r\n                    loopBegin: () => {\r\n                        if (!document.getElementById(`announcement-${tl}`)) {\r\n                            tl = 0;\r\n                        }\r\n                        document.getElementById(\r\n                            `announcement-${tl}`\r\n                        )!.style.display = \"block\";\r\n                    },\r\n                    loopComplete: () => {\r\n                        document.getElementById(\r\n                            `announcement-${tl}`\r\n                        )!.style.display = \"none\";\r\n                        tl++;\r\n                    },\r\n                })\r\n                .add({\r\n                    targets: `.announcement .letter`,\r\n                    translateY: [100, 0],\r\n                    translateZ: 0,\r\n                    opacity: [0, 1],\r\n                    easing: \"easeOutExpo\",\r\n                    duration: 1400,\r\n                    delay: (el, i) => 300 + 30 * i,\r\n                })\r\n                .add(\r\n                    {\r\n                        targets: `.announcement .letter`,\r\n                        translateX: [0, -30],\r\n                        opacity: [1, 0],\r\n                        easing: \"easeOutQuart\",\r\n                        duration: 1000,\r\n                        delay: (el, i) => 100 + 30 * i,\r\n                    },\r\n                    \"+=15000\"\r\n                );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"black\",\r\n                color: \"#fff\",\r\n            }}\r\n        >\r\n            <div\r\n                className=\"container\"\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n            >\r\n                <span className=\"right black-text noselect\">\r\n                    <FaEnvelope />\r\n                    <FaInstagram />\r\n                </span>\r\n\r\n                <>\r\n                    {data?.getAnnouncements.length === 0 ? (\r\n                        <>Follow us on our socials</>\r\n                    ) : (\r\n                        <span id=\"announcement\">\r\n                            {data?.getAnnouncements.map((_val, i) => {\r\n                                return (\r\n                                    <span\r\n                                        id={`announcement-${i}`}\r\n                                        className=\"announcement \"\r\n                                    >\r\n                                        {data.getAnnouncements[i].text}\r\n                                    </span>\r\n                                );\r\n                            })}\r\n                        </span>\r\n                    )}\r\n                </>\r\n\r\n                <span className=\"right\">\r\n                    <a\r\n                        href=\"mailto:cantrelatejp@gmail.com\"\r\n                        style={{ color: \"#fff\" }}\r\n                    >\r\n                        <FaEnvelope\r\n                            style={{ marginRight: \"5px\", marginLeft: \"5px\" }}\r\n                        />\r\n                    </a>\r\n\r\n                    <a\r\n                        href=\"https://www.instagram.com/cantrelate.jp/\"\r\n                        style={{ color: \"#fff\" }}\r\n                    >\r\n                        <FaInstagram />\r\n                    </a>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnnouncementBar;\r\n","export default __webpack_public_path__ + \"static/media/Blank_Logo.860b4dfa.png\";","import { GoogleLogin, useGoogleLogin } from \"react-google-login\";\r\nimport { setAccessToken } from \"../../accessToken\";\r\nimport { checkAuth } from \"../../CheckAuth\";\r\nimport { useLoginMutation } from \"../../generated/graphql\";\r\nimport \"../../css/navbar.scss\";\r\nimport { useEffect } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport AnnouncementBar from \"./AnnouncementBar\";\r\nimport Logo from \"../../images/Blank_Logo.png\";\r\nconst Navbar = () => {\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".sidenav\");\r\n        M.Sidenav.init(elems);\r\n    });\r\n    const [login] = useLoginMutation();\r\n\r\n    const handler = async res => {\r\n        console.log(\"res :>> \", res);\r\n        let response = await login({\r\n            variables: {\r\n                user_id: res.googleId,\r\n                email: res.profileObj.email,\r\n            },\r\n        });\r\n\r\n        console.log(\"response :>> \", response.data?.login);\r\n        setAccessToken(response.data?.login.accessToken!);\r\n        localStorage.setItem(\"iru5\", response.data?.login.refreshToken!);\r\n        window.location.href = \"#/my-orders\";\r\n    };\r\n\r\n    const { signIn } = useGoogleLogin({\r\n        clientId:\r\n            \"36358700157-4ihpf9tj4bjf4k346b8pnubt4meim4j0.apps.googleusercontent.com\",\r\n        onSuccess: handler,\r\n    });\r\n\r\n    // const logoutHandler = () => {\r\n    //     localStorage.setItem(\"iru5\", \"\");\r\n    //     setAccessToken(\"\");\r\n    //     window.location.reload();\r\n    // };\r\n\r\n    console.log(\"checkAuth() :>> \", checkAuth());\r\n    return (\r\n        <header style={{ position: \"sticky\", top: 0, zIndex: 997 }}>\r\n            <AnnouncementBar />\r\n            <div>\r\n                <nav className=\"white\">\r\n                    <div className=\"nav-wrapper\">\r\n                        <a href=\"#/home\" className=\"brand-logo\">\r\n                            <img\r\n                                style={{\r\n                                    width: \"250px\",\r\n                                    height: \"64px\",\r\n                                }}\r\n                                src={Logo}\r\n                                alt=\"Nari-Store\"\r\n                            ></img>\r\n                        </a>\r\n                        <a\r\n                            data-target=\"mobile-demo\"\r\n                            className=\"sidenav-trigger left\"\r\n                        >\r\n                            <i className=\"material-icons black-text noselect\">\r\n                                menu\r\n                            </i>\r\n                        </a>\r\n\r\n                        <ul\r\n                            id=\"nav\"\r\n                            className=\"center  hide-on-med-and-down\"\r\n                            style={{\r\n                                left: \"50%\",\r\n                                transform: \"translateX(-50%)\",\r\n                                display: \"inline-block\",\r\n                                position: \"absolute\",\r\n                                minWidth: \"600px\",\r\n                            }}\r\n                        >\r\n                            <li>\r\n                                <a href=\"#/home\">HOME</a>\r\n                            </li>\r\n                            <li className=\"black-text\">\r\n                                <a href=\"#/products\">PRODUCTS</a>\r\n                            </li>\r\n\r\n                            <li className=\" black-text\">\r\n                                {checkAuth() ? (\r\n                                    <a href=\"#/my-orders\">MY ORDERS</a>\r\n                                ) : (\r\n                                    // eslint-disable-next-line\r\n                                    <a\r\n                                        onClick={async () => {\r\n                                            await signIn();\r\n                                        }}\r\n                                    >\r\n                                        MY ORDERS\r\n                                    </a>\r\n                                )}\r\n                            </li>\r\n\r\n                            {/* {!checkAuth() ? (\r\n                                <li className=\"right black-text\">\r\n                                    <GoogleLogin\r\n                                        clientId=\"36358700157-4ihpf9tj4bjf4k346b8pnubt4meim4j0.apps.googleusercontent.com\"\r\n                                        onSuccess={async res => {\r\n                                            await handler(res);\r\n                                            window.location.reload();\r\n                                        }}\r\n                                        onFailure={handler}\r\n                                    />\r\n                                </li>\r\n                            ) : (\r\n                                <></>\r\n                            )} */}\r\n\r\n                            <li>\r\n                                <a href=\"#/my-cart\">\r\n                                    CART\r\n                                    {/* <i className=\"material-icons\">\r\n                                        shopping_cart\r\n                                    </i> */}\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                        <a\r\n                            href=\"#/my-cart\"\r\n                            className=\"right hide-on-large\"\r\n                            style={{ color: \"#000\" }}\r\n                        >\r\n                            CART\r\n                            {/* <i className=\"material-icons\">\r\n                                        shopping_cart\r\n                                    </i> */}\r\n                        </a>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n            <ul\r\n                className=\"sidenav\"\r\n                id=\"mobile-demo\"\r\n                style={{\r\n                    backgroundColor: \"rgba(0, 0, 0, 0.95)\",\r\n                    paddingTop: \"42px\",\r\n                }}\r\n            >\r\n                <li>\r\n                    <a\r\n                        style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                        href=\"#/products\"\r\n                    >\r\n                        Products\r\n                    </a>\r\n                </li>\r\n                <li style={{}}>\r\n                    {checkAuth() ? (\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            href=\"#/my-orders\"\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    ) : (\r\n                        // eslint-disable-next-line\r\n                        <a\r\n                            style={{ color: \"#fff\", textAlign: \"center\" }}\r\n                            onClick={async () => {\r\n                                await signIn();\r\n                            }}\r\n                        >\r\n                            My Orders\r\n                        </a>\r\n                    )}\r\n                </li>\r\n                {/* {!checkAuth() ? (\r\n                    <li>\r\n                        <GoogleLogin\r\n                            clientId=\"36358700157-4ihpf9tj4bjf4k346b8pnubt4meim4j0.apps.googleusercontent.com\"\r\n                            onSuccess={async res => {\r\n                                await handler(res);\r\n                                window.location.reload();\r\n                            }}\r\n                            onFailure={handler}\r\n                        />\r\n                    </li>\r\n                ) : (\r\n                    <></>\r\n                )} */}\r\n            </ul>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","const CopyrightBar = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                border: \"1px solid\",\r\n            }}\r\n        >\r\n            <span\r\n                style={{\r\n                    marginTop: \"5px\",\r\n                    marginBottom: \"5px\",\r\n                    fontSize: \"26.5px\",\r\n                    fontWeight: 550,\r\n                }}\r\n            >\r\n                © 2021 CANT RELATE .JP\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CopyrightBar;\r\n","export default __webpack_public_path__ + \"static/media/Blank_Footer_logo.b8ae07f0.png\";","import CopyrightBar from \"./CopyrightBar\";\r\nimport FooterLogo from \"../../images/Blank_Footer_logo.png\";\r\nimport { FaInstagram, FaEnvelope } from \"react-icons/fa\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n            <footer\r\n                style={{\r\n                    backgroundColor: \"#000\",\r\n                    width: \"100%\",\r\n                    height: \"220px\",\r\n                }}\r\n            >\r\n                <div className=\"container\">\r\n                    <div\r\n                        className=\"row\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"space-between\",\r\n                        }}\r\n                    >\r\n                        <div className=\"col l6 s12\">\r\n                            <img\r\n                                src={FooterLogo}\r\n                                alt=\"footer_logo\"\r\n                                style={{ height: \"220px\" }}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"col l4 offset-12 s12\">\r\n                            <ul>\r\n                                <li>\r\n                                    <a href=\"\" className=\"white-text\">\r\n                                        <h4 style={{ fontWeight: 600 }}>\r\n                                            Return Policy\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/contact\" className=\"white-text\">\r\n                                        <h4\r\n                                            style={{\r\n                                                marginTop: \"0px\",\r\n                                                fontWeight: 600,\r\n                                            }}\r\n                                        >\r\n                                            Contact Us\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#/FAQ\" className=\"white-text\">\r\n                                        <h4\r\n                                            style={{\r\n                                                marginTop: \"0px\",\r\n                                                fontWeight: 600,\r\n                                            }}\r\n                                        >\r\n                                            FAQ\r\n                                        </h4>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"https://www.instagram.com/cantrelate.jp/\">\r\n                                        <FaInstagram\r\n                                            style={{\r\n                                                width: \"30px\",\r\n                                                height: \"30px\",\r\n                                                color: \"#fff\",\r\n                                                marginRight: \"7px\",\r\n                                            }}\r\n                                        />\r\n                                    </a>\r\n                                    <a href=\"mailto:cantrelatejp@gmail.com\">\r\n                                        <FaEnvelope\r\n                                            style={{\r\n                                                width: \"30px\",\r\n                                                height: \"30px\",\r\n                                                color: \"#fff\",\r\n                                            }}\r\n                                        />\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n            <CopyrightBar />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { useGetProductsQuery } from \"../../generated/graphql\";\r\nimport \"../../css/products.scss\";\r\nimport { useEffect } from \"react\";\r\nimport anime from \"animejs\";\r\n\r\nconst Products = () => {\r\n    const { data, loading } = useGetProductsQuery();\r\n\r\n    useEffect(() => {\r\n        anime({\r\n            duration: function (_t, i) {\r\n                return 900 + i * 75;\r\n            },\r\n            targets: \".card-content\",\r\n            easing: \"easeOutExpo\",\r\n            // delay: function (t, i) {\r\n            //     return i * 50;\r\n            // },\r\n            opacity: { value: [0, 1], easing: \"linear\" },\r\n            scale: [0, 1],\r\n            delay: anime.stagger(150, { start: 100 }),\r\n        });\r\n\r\n        anime({\r\n            duration: function (_t, i) {\r\n                return 900 + i * 75;\r\n            },\r\n            targets: \".card\",\r\n            easing: \"easeOutExpo\",\r\n            // delay: function (t, i) {\r\n            //     return i * 50;\r\n            // },\r\n            opacity: { value: [0, 1], easing: \"linear\" },\r\n            scale: [0, 1],\r\n            delay: anime.stagger(150, { start: 100 }),\r\n        });\r\n    });\r\n\r\n    if (loading) {\r\n        return <>loading</>;\r\n    }\r\n\r\n    console.log(\"data :>> \", data?.getProducts);\r\n    return (\r\n        <div className=\"container\">\r\n            <h1\r\n                className=\"center-align\"\r\n                style={{\r\n                    marginTop: \"60px\",\r\n                    marginBottom: \"60px\",\r\n                    fontWeight: 600,\r\n                }}\r\n            >\r\n                Products\r\n            </h1>\r\n\r\n            <div className=\"products-grid\">\r\n                {data?.getProducts.map((_val, i) => {\r\n                    let product: any = data.getProducts[i];\r\n                    return (\r\n                        <div\r\n                            className=\"card z-depth-0\"\r\n                            style={{ margin: \"0px 8px 32px 8px\" }}\r\n                            key={i}\r\n                        >\r\n                            <a\r\n                                className=\"black-text\"\r\n                                href={`#/product-details:${product.product_id}`}\r\n                            >\r\n                                <div className=\"card-image\">\r\n                                    <img\r\n                                        src={product.images[0].img_url!}\r\n                                        alt={product.name}\r\n                                        style={{ maxHeight: \"280px\" }}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"card-content\">\r\n                                    <span className=\"card-title\">\r\n                                        <h5 className=\"center-align\">\r\n                                            {product.name}\r\n                                        </h5>\r\n                                    </span>\r\n                                    <span\r\n                                        style={{\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"center\",\r\n                                        }}\r\n                                    >\r\n                                        <p\r\n                                            className=\"product-price\"\r\n                                            style={{ fontSize: \"16px\" }}\r\n                                        >\r\n                                            $\r\n                                            {Number(\r\n                                                product.price / 100\r\n                                            ).toFixed(2)}\r\n                                        </p>\r\n                                    </span>\r\n                                </div>\r\n                            </a>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Products;\r\n","import { useGetUsersOrdersQuery } from \"../generated/graphql\";\r\n\r\nconst UsersOrders = () => {\r\n    const { data, loading } = useGetUsersOrdersQuery();\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    console.log(\"data => \" + data);\r\n\r\n    return <>test</>;\r\n};\r\n\r\nexport default UsersOrders;\r\n","import { Redirect } from \"react-router\";\r\nimport { useGetProductQuery } from \"../../generated/graphql\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addProductToCart } from \"../../redux/actions/userAction\";\r\n\r\nconst ProductDetails = () => {\r\n    let product_id: number;\r\n    if (process.env.NODE_ENV === \"production\") {\r\n        product_id = Number(window.location.href.split(\":\")[2]);\r\n    } else {\r\n        product_id = Number(window.location.href.split(\":\")[3]);\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { data, loading, error } = useGetProductQuery({\r\n        variables: {\r\n            product_id,\r\n        },\r\n    });\r\n\r\n    if (loading) {\r\n        return <>...loading</>;\r\n    }\r\n\r\n    if (!data || error) {\r\n        return <Redirect to=\"/products\" />;\r\n    }\r\n\r\n    let product: any = data!.getProduct;\r\n    console.log(\"product :>> \", product);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"center-align\">{product.name}</h3>\r\n            <h6 className=\"center-align\">\r\n                ${Number(product.price / 100).toFixed(2)}\r\n            </h6>\r\n\r\n            <div className=\"row\">\r\n                <div\r\n                    className=\"col s4 offset-s2\"\r\n                    style={{ display: \"flex\", justifyContent: \"end\" }}\r\n                >\r\n                    <div>\r\n                        <img\r\n                            src={product.images[0].img_url || \"\"}\r\n                            alt=\"product\"\r\n                            style={{ maxWidth: \"100%\" }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col s5 offset-s1\">\r\n                    <div className=\"row\">{product.desc}</div>\r\n                    <div className=\"row\">\r\n                        <button\r\n                            onClick={() => {\r\n                                dispatch(addProductToCart(product));\r\n                            }}\r\n                        >\r\n                            Add to Cart\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductDetails;\r\n","import { Product, ProductInCart } from \"../RootReducer\";\r\n\r\nexport const addProductToCart = (product: Product) => {\r\n    return {\r\n        type: \"ADD_PRODUCT_TO_CART\",\r\n        product,\r\n    };\r\n};\r\n\r\nexport const changeQuantityOnProduct = (\r\n    newQuantity: number,\r\n    productIndex: number\r\n) => {\r\n    return { type: \"CHANGE_QUANTITY_ON_PRODUCT\", newQuantity, productIndex };\r\n};\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useCheckoutMutation } from \"../../generated/graphql\";\r\nimport { changeQuantityOnProduct } from \"../../redux/actions/userAction\";\r\n\r\nconst Cart = () => {\r\n    const [checkout] = useCheckoutMutation();\r\n    const [state, setState] = useState({\r\n        refresh: false,\r\n        quantities: [],\r\n    });\r\n\r\n    const products = useSelector(state => state.productsInCart);\r\n    const dispatch = useDispatch();\r\n    console.log(\"products cart :>> \", products);\r\n\r\n    let total = 0;\r\n    for (let i = 0; i < products.length; i++) {\r\n        total += products[i].price * products[i].quantity;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {products.length === 0 ? (\r\n                <h3 className=\"center-align\">Your Shopping Cart Is Empty!</h3>\r\n            ) : (\r\n                <>\r\n                    <h3 className=\"center-align\">Subtotal</h3>\r\n                    <h6 className=\"center-align\">\r\n                        ${Number(total / 100).toFixed(2)}\r\n                    </h6>\r\n                    {products.map((_val, i) => {\r\n                        return (\r\n                            <>\r\n                                <div\r\n                                    id={`product-${i}`}\r\n                                    className={`product-${i} row container`}\r\n                                >\r\n                                    <div className={` col s4`}>\r\n                                        <img\r\n                                            src={products[i].img_url}\r\n                                            style={{ width: \"100%\" }}\r\n                                        />\r\n                                    </div>\r\n                                    <div\r\n                                        className=\"col s4\"\r\n                                        style={{\r\n                                            height: \"100%\",\r\n                                            display: \"flex\",\r\n                                            flexDirection: \"column\",\r\n                                            justifyContent: \"center\",\r\n                                        }}\r\n                                    >\r\n                                        <h6>{products[i].name}</h6>\r\n                                    </div>\r\n\r\n                                    <div className=\"col s2\">\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            value={\r\n                                                state.quantities[i] ||\r\n                                                state.quantities[i] === 0\r\n                                                    ? state.quantities[i]\r\n                                                    : products[i].quantity\r\n                                            }\r\n                                            minLength={0}\r\n                                            maxLength={2}\r\n                                            pattern=\"\\D\"\r\n                                            onBlur={e => {\r\n                                                dispatch(\r\n                                                    changeQuantityOnProduct(\r\n                                                        Number(e.target.value),\r\n                                                        i\r\n                                                    )\r\n                                                );\r\n\r\n                                                let tmp = state.quantities;\r\n                                                tmp.splice(i, 1);\r\n\r\n                                                // if (e.target.value === \"0\") {\r\n                                                //     anime({\r\n                                                //         duration: 400,\r\n                                                //         targets: `.product-${i}`,\r\n                                                //         easing: \"easeOutExpo\",\r\n                                                //         opacity: {\r\n                                                //             value: [1, 0],\r\n                                                //             easing: \"linear\",\r\n                                                //         },\r\n                                                //     });\r\n                                                // }\r\n                                                setState({\r\n                                                    ...state,\r\n                                                    quantities: tmp,\r\n                                                    refresh: !state.refresh,\r\n                                                });\r\n                                            }}\r\n                                            onChange={e => {\r\n                                                let tmp: any = state.quantities;\r\n\r\n                                                if (!e.target.value) {\r\n                                                    tmp[i] = 0;\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        quantities: tmp,\r\n                                                    });\r\n                                                }\r\n                                                if (\r\n                                                    e.target.value.match(/\\d/g)\r\n                                                ) {\r\n                                                    tmp[i] = Number(\r\n                                                        e.target.value\r\n                                                    );\r\n                                                    setState({\r\n                                                        ...state,\r\n                                                        quantities: tmp,\r\n                                                    });\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                textAlign: \"center\",\r\n                                                border: \"1px solid #000\",\r\n                                                height: \"56px\",\r\n                                                width: \"56px\",\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"col s2\">\r\n                                        <span></span>$\r\n                                        {Number(\r\n                                            products[i].price / 100\r\n                                        ).toFixed(2)}\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        );\r\n                    })}\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            marginBottom: \"40px\",\r\n                        }}\r\n                    >\r\n                        <a\r\n                            className=\"btn\"\r\n                            style={{\r\n                                marginTop: \"16px\",\r\n                                width: \"380px\",\r\n                                backgroundColor: \"#343145\",\r\n                            }}\r\n                            href=\"#/checkout\"\r\n                        >\r\n                            checkout\r\n                        </a>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n    useCheckoutMutation,\r\n    useGetCurrUserQuery,\r\n    useValidateCouponMutation,\r\n} from \"../../generated/graphql\";\r\nimport { CardElement } from \"@stripe/react-stripe-js\";\r\n\r\nfunction CardSection() {\r\n    const CARD_ELEMENT_OPTIONS: any = {\r\n        iconStyle: \"solid\",\r\n        hidePostalCode: true,\r\n        style: {\r\n            base: {\r\n                iconColor: \"rgb(240, 57, 122)\",\r\n                color: \"rgb(240, 57, 122)\",\r\n                fontSize: \"16px\",\r\n                fontFamily: '\"Open Sans\", sans-serif',\r\n                fontSmoothing: \"antialiased\",\r\n                \"::placeholder\": {\r\n                    color: \"#CFD7DF\",\r\n                },\r\n            },\r\n\r\n            invalid: {\r\n                color: \"#e5424d\",\r\n                \":focus\": {\r\n                    color: \"#303238\",\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    return <CardElement options={CARD_ELEMENT_OPTIONS} />;\r\n}\r\n\r\nconst Checkout = props => {\r\n    const { data } = useGetCurrUserQuery();\r\n    const [checkout] = useCheckoutMutation();\r\n    const [validateCoupon] = useValidateCouponMutation();\r\n    const [discountPH, setDiscountPH] = useState(0);\r\n    const products = useSelector(state => state.productsInCart);\r\n    const [email, setEmail] = useState(data?.getCurrUser.email || \"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [coupon, setCoupon] = useState(\"\");\r\n    const [subtotal, setSubtotal] = useState(-1);\r\n    const [subtotalWtax, setSubtotalWtax] = useState(-1);\r\n    const [billing, setBilling] = useState({\r\n        refresh: false,\r\n        email: \"\",\r\n        name: \"\",\r\n        address: {\r\n            city: \"\",\r\n            line1: \"\",\r\n            zip: \"\",\r\n            state: \"\",\r\n        },\r\n    });\r\n\r\n    const [address, setAddress] = useState({\r\n        city: \"\",\r\n        line1: \"\",\r\n        zip: \"\",\r\n        state: \"\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        var elems = document.querySelectorAll(\".autocomplete\");\r\n        M.Autocomplete.init(elems, {\r\n            data: {\r\n                Alabama: null,\r\n                Alaska: null,\r\n                Arizona: null,\r\n                Arkansas: null,\r\n                California: null,\r\n                Colorado: null,\r\n                Connecticut: null,\r\n                Delaware: null,\r\n                Florida: null,\r\n                Georgia: null,\r\n                Hawaii: null,\r\n                Idaho: null,\r\n                Illinois: null,\r\n                Indiana: null,\r\n                Iowa: null,\r\n                Kansas: null,\r\n                Kentucky: null,\r\n                Louisiana: null,\r\n                Maine: null,\r\n                Maryland: null,\r\n                Massachusettes: null,\r\n                Michigan: null,\r\n                Minnesota: null,\r\n                Mississippi: null,\r\n                Missouri: null,\r\n                Montana: null,\r\n                Nebraska: null,\r\n                Nevada: null,\r\n                \"New Hampshire\": null,\r\n                \"New Jersey\": null,\r\n                \"New Mexico\": null,\r\n                \"New York\": null,\r\n                \"North Carolina\": null,\r\n                \"North Dakota\": null,\r\n                Ohio: null,\r\n                Oklahoma: null,\r\n                Oregon: null,\r\n                Pennsylvania: null,\r\n                \"Rhode Island\": null,\r\n                \"South Carolina\": null,\r\n                \"South Dakota\": null,\r\n                Tennessee: null,\r\n                Texas: null,\r\n                Utah: null,\r\n                Vermont: null,\r\n                Virginia: null,\r\n                Washington: null,\r\n                \"West Virginia\": null,\r\n                Wisconsin: null,\r\n                Wyoming: null,\r\n            },\r\n        });\r\n    });\r\n\r\n    const handleSubmit = async () => {\r\n        const { stripe, elements } = props;\r\n        if (!stripe || !elements) {\r\n            return;\r\n        }\r\n\r\n        const card = elements.getElement(CardElement);\r\n        const result = await stripe.createToken(card);\r\n\r\n        if (result.error) {\r\n            console.log(\"result.error :>> \", result.error);\r\n        } else {\r\n            console.log(\"result.token :>> \", result.token);\r\n            let tmp: any = address;\r\n            tmp.email = email;\r\n            let products_str = JSON.stringify(products),\r\n                token_str = JSON.stringify(result.token),\r\n                shipping_str = JSON.stringify(tmp);\r\n\r\n            let user_id;\r\n            if (!data) {\r\n                user_id = \"NONE\";\r\n            } else {\r\n                user_id = data.getCurrUser!.user_id!;\r\n            }\r\n\r\n            let billing_str = \"\";\r\n            if (billing.refresh) {\r\n                billing_str = JSON.stringify(billing);\r\n            } else {\r\n                billing_str = \"NONE\";\r\n            }\r\n\r\n            checkout({\r\n                variables: {\r\n                    token: token_str,\r\n                    user_id,\r\n                    products: products_str,\r\n                    shipping_info: shipping_str,\r\n                    billing_info: billing_str,\r\n                    coupon,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    if (subtotal === -1) {\r\n        let tmp_subtotal = 0;\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            tmp_subtotal += products[i].price * products[i].quantity;\r\n        }\r\n\r\n        let tax = Math.round(tmp_subtotal * 0.095);\r\n        console.log(\"tax :>> \", tax);\r\n        // tmp_subtotal += tax;\r\n        setSubtotal(tmp_subtotal);\r\n        setSubtotalWtax(tmp_subtotal + tax);\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" style={{ height: \"100%\", margin: \"0\" }}>\r\n            <div className=\"col s12 m6 \" style={{ minHeight: \"93vh\" }}>\r\n                <div className=\"container\" style={{ marginTop: \"50px\" }}>\r\n                    <div className=\"row\">\r\n                        <a href=\"#/my-cart\">\r\n                            <svg\r\n                                style={{ marginRight: \"8px\" }}\r\n                                focusable=\"false\"\r\n                                width=\"12\"\r\n                                height=\"12\"\r\n                                viewBox=\"0 0 16 16\"\r\n                            >\r\n                                <path\r\n                                    d=\"M3.417 7H15a1 1 0 0 1 0 2H3.417l4.591 4.591a1 1 0 0 1-1.415 1.416l-6.3-6.3a1 1 0 0 1 0-1.414l6.3-6.3A1 1 0 0 1 8.008 2.41z\"\r\n                                    fill-rule=\"evenodd\"\r\n                                ></path>\r\n                            </svg>\r\n                            <span>Back To Cart</span>\r\n                        </a>\r\n                    </div>\r\n                    <div>\r\n                        <div\r\n                            className=\"ProductSummary container\"\r\n                            style={{ marginTop: \"32px\" }}\r\n                        >\r\n                            <div\r\n                                className=\"ProductSummary-info\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"column\",\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    style={{\r\n                                        color: \"rgba(26,26,26,.6)\",\r\n                                        fontWeight: \"bold\",\r\n                                    }}\r\n                                >\r\n                                    Total\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        fontSize: \"36px\",\r\n                                        letterSpacing: \"-.03rem\",\r\n                                        color: \"#303030\",\r\n                                    }}\r\n                                >\r\n                                    ${Number(subtotalWtax / 100).toFixed(2)}\r\n                                </span>\r\n                                <span\r\n                                    style={{\r\n                                        marginTop: \"32px\",\r\n                                        marginBottom: \"32px\",\r\n                                    }}\r\n                                    id=\"Products-summary\"\r\n                                >\r\n                                    {products.map((_val, i) => {\r\n                                        return (\r\n                                            <div\r\n                                                className=\"product\"\r\n                                                style={{\r\n                                                    marginBottom: \"16px\",\r\n                                                    display: \"flex\",\r\n                                                    justifyContent:\r\n                                                        \"space-between\",\r\n                                                }}\r\n                                            >\r\n                                                <div\r\n                                                    className=\"product-name\"\r\n                                                    style={{\r\n                                                        fontSize: \"16px\",\r\n                                                        fontWeight: 600,\r\n                                                    }}\r\n                                                >\r\n                                                    {products[i].name}\r\n                                                    {products[i].quantity !==\r\n                                                    1 ? (\r\n                                                        <>\r\n                                                            {\" \"}\r\n                                                            x\r\n                                                            {\r\n                                                                products[i]\r\n                                                                    .quantity\r\n                                                            }\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <></>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div\r\n                                                    className=\"product-subtotal\"\r\n                                                    style={{ fontWeight: 390 }}\r\n                                                >\r\n                                                    {Number(\r\n                                                        (products[i].price *\r\n                                                            products[i]\r\n                                                                .quantity) /\r\n                                                            100\r\n                                                    ).toFixed(2)}\r\n                                                </div>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                    <div\r\n                                        className=\"subtotal\"\r\n                                        style={{\r\n                                            paddingBottom: \"16px\",\r\n                                            paddingTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Subtotal</span>\r\n                                        <span>\r\n                                            {Number(subtotal / 100).toFixed(2)}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <div\r\n                                        id=\"coupon-applied\"\r\n                                        style={{\r\n                                            display: \"none\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Coupon Applied</span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            -\r\n                                            {Number(discountPH / 100).toFixed(\r\n                                                2\r\n                                            )}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"row\" id=\"promocode-input\">\r\n                                        <div className=\"col s9\">\r\n                                            <div className=\"input-field\">\r\n                                                <input\r\n                                                    id=\"PromoCode\"\r\n                                                    type=\"text\"\r\n                                                    className=\"validate\"\r\n                                                    value={coupon}\r\n                                                    onChange={e =>\r\n                                                        setCoupon(\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                />\r\n                                                <label htmlFor=\"PromoCode\">\r\n                                                    Add a promotion code\r\n                                                </label>\r\n                                                <span\r\n                                                    id=\"coupon-helper\"\r\n                                                    className=\"helper-text\"\r\n                                                    data-error=\"Please enter a valid email\"\r\n                                                ></span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col s3\">\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                style={{\r\n                                                    backgroundColor: \"#343145\",\r\n                                                    marginTop: \"25px\",\r\n                                                    marginBottom: \"15px\",\r\n                                                }}\r\n                                                onClick={async () => {\r\n                                                    //validate  coupon\r\n                                                    if (coupon.length !== 0) {\r\n                                                        let type = await validateCoupon(\r\n                                                            {\r\n                                                                variables: {\r\n                                                                    coupon_name: coupon,\r\n                                                                },\r\n                                                            }\r\n                                                        );\r\n                                                        console.log(\r\n                                                            \"type :>> \",\r\n                                                            type\r\n                                                        );\r\n                                                        if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"INVALID\"\r\n                                                        ) {\r\n                                                            document\r\n                                                                .getElementById(\r\n                                                                    \"PromoCode\"\r\n                                                                )!\r\n                                                                .classList.add(\r\n                                                                    \"invalid\"\r\n                                                                );\r\n\r\n                                                            document.getElementById(\r\n                                                                \"coupon-helper\"\r\n                                                            )!.attributes[\r\n                                                                \"data-error\"\r\n                                                            ].nodeValue = `The coupon you entered(${coupon}) is not valid`;\r\n\r\n                                                            setCoupon(\"\");\r\n                                                        } else if (\r\n                                                            type.data!\r\n                                                                .validateCoupon ===\r\n                                                            \"FREE_SHIPPING\"\r\n                                                        ) {\r\n                                                            // Handle Free Shipping here\r\n                                                        } else {\r\n                                                            // amount to subtract from subtotal = subtotal * percentage\r\n                                                            let percentage =\r\n                                                                \"0.\" +\r\n                                                                type.data!\r\n                                                                    .validateCoupon;\r\n\r\n                                                            let discount = Math.round(\r\n                                                                subtotal *\r\n                                                                    Number(\r\n                                                                        percentage\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            let tmp = subtotal;\r\n                                                            tmp -= discount;\r\n\r\n                                                            let tax = Math.round(\r\n                                                                tmp * 0.095\r\n                                                            );\r\n\r\n                                                            setSubtotalWtax(\r\n                                                                tmp + tax\r\n                                                            );\r\n                                                            console.log(\r\n                                                                \"tax :>> \",\r\n                                                                tax\r\n                                                            );\r\n                                                            setSubtotal(tmp);\r\n                                                            setDiscountPH(\r\n                                                                discount\r\n                                                            );\r\n\r\n                                                            // hide promo input and submit button\r\n                                                            document.getElementById(\r\n                                                                \"promocode-input\"\r\n                                                            )!.style.display =\r\n                                                                \"none\";\r\n                                                            // replace promo input and submit button with a icon that shows the coupon and discount applied\r\n                                                            document.getElementById(\r\n                                                                \"coupon-applied\"\r\n                                                            )!.style.display =\r\n                                                                \"flex\";\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"8px\",\r\n                                            marginBottom: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Sales Tax</span>\r\n                                        <span style={{ fontWeight: \"bold\" }}>\r\n                                            {Number(\r\n                                                Math.round(subtotal * 0.095) /\r\n                                                    100\r\n                                            ).toFixed(2)}\r\n                                            (9.5%)\r\n                                        </span>\r\n                                    </span>\r\n\r\n                                    <div className=\"divider\"></div>\r\n\r\n                                    <span\r\n                                        style={{\r\n                                            marginTop: \"16px\",\r\n                                            display: \"flex\",\r\n                                            justifyContent: \"space-between\",\r\n                                        }}\r\n                                    >\r\n                                        <span>Total Due</span>\r\n                                        <span>\r\n                                            {Number(subtotalWtax / 100).toFixed(\r\n                                                2\r\n                                            )}\r\n                                        </span>\r\n                                    </span>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className=\"col s12 m6 z-depth-3 \"\r\n                style={{ minHeight: \"93vh\" }}\r\n            >\r\n                <div className=\"container\">\r\n                    <h2\r\n                        style={{\r\n                            color: \"rgba(26,26,26,.9)\",\r\n                            fontWeight: 500,\r\n                            fontSize: \"16px\",\r\n                        }}\r\n                    >\r\n                        Shipping Information\r\n                    </h2>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"email\"\r\n                            type=\"text\"\r\n                            value={email}\r\n                            onChange={e => setEmail(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your email\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"name\"\r\n                            value={name}\r\n                            type=\"text\"\r\n                            onChange={e => setName(e.target.value)}\r\n                        />\r\n                        <label htmlFor=\"name\">Name</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your name\"\r\n                        ></span>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"address\"\r\n                            value={address.line1}\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    line1: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"address\">Address</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please your address\"\r\n                        ></span>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"city\"\r\n                                    value={address.city}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            city: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"city\">City</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your city\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col s6\">\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"zip\"\r\n                                    value={address.zip}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setAddress({\r\n                                            ...address,\r\n                                            zip: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"zip\">Zip</label>\r\n                                <span\r\n                                    className=\"helper-text\"\r\n                                    data-error=\"Please your zip\"\r\n                                ></span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"input-field\">\r\n                        <input\r\n                            id=\"state\"\r\n                            value={address.state}\r\n                            className=\"autocomplete\"\r\n                            type=\"text\"\r\n                            onChange={e =>\r\n                                setAddress({\r\n                                    ...address,\r\n                                    state: e.target.value,\r\n                                })\r\n                            }\r\n                        />\r\n                        <label htmlFor=\"state\">State</label>\r\n                        <span\r\n                            className=\"helper-text\"\r\n                            data-error=\"Please Pick a State\"\r\n                        ></span>\r\n                    </div>\r\n\r\n                    <div className=\"divider\"></div>\r\n\r\n                    <p>\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"Billing_input\"\r\n                                onClick={() => {\r\n                                    setBilling({\r\n                                        refresh: !billing.refresh,\r\n                                        email: \"\",\r\n                                        name: \"\",\r\n                                        address: {\r\n                                            city: \"\",\r\n                                            line1: \"\",\r\n                                            zip: \"\",\r\n                                            state: \"\",\r\n                                        },\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <span>Billing is different from shipping</span>\r\n                        </label>\r\n                    </p>\r\n\r\n                    {billing.refresh ? (\r\n                        <>\r\n                            <h2\r\n                                style={{\r\n                                    color: \"rgba(26,26,26,.9)\",\r\n                                    fontWeight: 500,\r\n                                    fontSize: \"16px\",\r\n                                }}\r\n                            >\r\n                                Billing Information\r\n                            </h2>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_email\"\r\n                                    type=\"text\"\r\n                                    value={billing.email}\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            email: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_email\">\r\n                                    Billing Email\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_name\"\r\n                                    value={billing.name}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            name: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_name\">Name</label>\r\n                            </div>\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_address\"\r\n                                    value={billing.address.line1}\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                line1: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_address\">Address</label>\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_city\"\r\n                                            value={billing.address.city}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        city: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_city\">\r\n                                            City\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col s6\">\r\n                                    <div className=\"input-field\">\r\n                                        <input\r\n                                            id=\"billing_zip\"\r\n                                            value={billing.address.zip}\r\n                                            type=\"text\"\r\n                                            onChange={e =>\r\n                                                setBilling({\r\n                                                    ...billing,\r\n                                                    address: {\r\n                                                        ...billing.address,\r\n                                                        zip: e.target.value,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <label htmlFor=\"billing_zip\">Zip</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"input-field\">\r\n                                <input\r\n                                    id=\"billing_state\"\r\n                                    value={billing.address.state}\r\n                                    className=\"autocomplete\"\r\n                                    type=\"text\"\r\n                                    onChange={e =>\r\n                                        setBilling({\r\n                                            ...billing,\r\n                                            address: {\r\n                                                ...billing.address,\r\n                                                state: e.target.value,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <label htmlFor=\"billing_state\">State</label>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                    <h2\r\n                        style={{\r\n                            color: \"rgba(26,26,26,.9)\",\r\n                            fontWeight: 500,\r\n                            fontSize: \"16px\",\r\n                        }}\r\n                    >\r\n                        Payment Details\r\n                    </h2>\r\n                    <CardSection />\r\n\r\n                    <div\r\n                        style={{\r\n                            width: \"100%\",\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn\"\r\n                            style={{\r\n                                marginTop: \"16px\",\r\n                                marginBottom: \"16px\",\r\n                                width: \"380px\",\r\n                                backgroundColor: \"#343145\",\r\n                            }}\r\n                            onClick={() => {\r\n                                if (\r\n                                    !name ||\r\n                                    !email ||\r\n                                    !address.line1 ||\r\n                                    !address.city ||\r\n                                    !address.zip ||\r\n                                    !address.state\r\n                                ) {\r\n                                    if (!email) {\r\n                                        document\r\n                                            .getElementById(\"email\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    if (!name) {\r\n                                        document\r\n                                            .getElementById(\"name\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n\r\n                                    if (!address.line1) {\r\n                                        document\r\n                                            .getElementById(\"address\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n\r\n                                    if (!address.city) {\r\n                                        document\r\n                                            .getElementById(\"city\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n\r\n                                    if (!address.zip) {\r\n                                        document\r\n                                            .getElementById(\"zip\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n\r\n                                    if (!address.state) {\r\n                                        document\r\n                                            .getElementById(\"state\")!\r\n                                            .classList.add(\"invalid\");\r\n                                    }\r\n                                    M.toast({\r\n                                        html: \"Please fill in the missing data\",\r\n                                        classes: \"rounded\",\r\n                                    });\r\n                                } else {\r\n                                    handleSubmit();\r\n                                }\r\n                            }}\r\n                        >\r\n                            Pay ${Number(subtotalWtax / 100).toFixed(2)}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n","const FAQ = () => {\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>FAQ</h1>\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div className=\"row\">\r\n                    <iframe\r\n                        width=\"860\"\r\n                        height=\"615\"\r\n                        src=\"https://www.youtube.com/embed/MYFyIZOw_LA?&autoplay=1\"\r\n                        frameBorder=\"0\"\r\n                        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                        allowFullScreen\r\n                    ></iframe>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FAQ;\r\n","import { useState } from \"react\";\r\n\r\nconst Contact = () => {\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <h1>Contact Us</h1>\r\n            </div>\r\n\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <span>\r\n                    <label htmlFor=\"message\">Message</label>\r\n                    <br />\r\n                    <input\r\n                        id=\"message\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        style={{\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            backgroundColor: \"#EEF2F5\",\r\n                            width: \" 755px\",\r\n                            height: \"230px\",\r\n                        }}\r\n                        value={message}\r\n                        onChange={e => setMessage(e.target.value)}\r\n                    />\r\n                </span>\r\n            </div>\r\n\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <span>\r\n                    <label htmlFor=\"name\">Your Name</label>\r\n                    <br />\r\n                    <input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={name}\r\n                        onChange={e => setName(e.target.value)}\r\n                    />\r\n                </span>\r\n            </div>\r\n\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <span>\r\n                    <label className=\" browser-default\" htmlFor=\"email\">\r\n                        Your Email\r\n                    </label>\r\n                    <br />\r\n                    <input\r\n                        id=\"email\"\r\n                        type=\"text\"\r\n                        className=\"validate browser-default\"\r\n                        value={email}\r\n                        onChange={e => setEmail(e.target.value)}\r\n                    />\r\n                </span>\r\n            </div>\r\n\r\n            <div\r\n                className=\"row\"\r\n                style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n                <button className=\"btn\">Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","import { Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Products from \"../components/products/Products\";\r\nimport UsersOrders from \"../components/UsersOrders\";\r\nimport ProductDetails from \"../components/products/ProductDetails\";\r\nimport Cart from \"../components/checkout/Cart\";\r\nimport Checkout from \"../components/checkout/Checkout\";\r\nimport { Elements, ElementsConsumer } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport FAQ from \"../components/FAQ\";\r\nimport Contact from \"../components/Contact\";\r\n\r\nexport const Routes = () => {\r\n    const stripePromise = loadStripe(\r\n        \"pk_test_51IM63dFngR9vHhwSep5ZkKLLach7ZP7BXFkDjSgo6FmQRdy8DOkV96RdHREb1L4vMgQ1fK6FlNfwDdlFX8zKdf1D00wHpHGbCC\"\r\n    );\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/products\" render={() => <Products />} />\r\n            <Route\r\n                exact\r\n                path=\"/product-details:id\"\r\n                render={() => <ProductDetails />}\r\n            />\r\n            <Route exact path=\"/my-orders\" render={() => <UsersOrders />} />\r\n            <Route exact path=\"/my-cart\" render={() => <Cart />} />\r\n            <Route\r\n                exact\r\n                path=\"/checkout\"\r\n                render={() => (\r\n                    <Elements stripe={stripePromise}>\r\n                        <ElementsConsumer>\r\n                            {({ stripe, elements }) => (\r\n                                <Checkout stripe={stripe} elements={elements} />\r\n                            )}\r\n                        </ElementsConsumer>\r\n                    </Elements>\r\n                )}\r\n            />\r\n            <Route exact path=\"/FAQ\" render={() => <FAQ />} />\r\n            <Route exact path=\"/contact\" render={() => <Contact />} />\r\n            <Route render={() => <Redirect to=\"/products\" />} />\r\n        </Switch>\r\n    );\r\n};\r\n","import Navbar from \"./components/navbar/Navbar\";\nimport Footer from \"./components/footer/Footer\";\nimport { Routes } from \"./routes/Routes\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport \"./css/app.scss\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App noselect\">\n                <Navbar />\n                <Routes />\n                <Footer />\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","let URI = \"\";\r\n\r\nif (process.env.NODE_ENV === \"production\") {\r\n    URI = \"https://infinite-bayou-56493.herokuapp.com\";\r\n} else {\r\n    URI = \"http://localhost:4000\";\r\n}\r\n\r\nexport default URI;\r\n","import { useEffect, useState } from \"react\";\r\nimport { setAccessToken } from \"./accessToken\";\r\nimport App from \"./App\";\r\nimport URI from \"./URI\";\r\n\r\nconst AppWrapper = () => {\r\n    console.log(\"app wrapper\");\r\n    const [pageLoader, setPageLoader] = useState(true);\r\n\r\n    useEffect(() => {\r\n        //get new accessToken & refreshToken with fetch to URI/refresh_token\r\n        try {\r\n            let tmp = localStorage.getItem(\"iru5\") as string;\r\n            fetch(`${URI}/refresh_token`, {\r\n                method: \"POST\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    refreshToken: tmp,\r\n                },\r\n            }).then(async res => {\r\n                const { accessToken, refreshToken } = await res.json();\r\n                setAccessToken(accessToken);\r\n                localStorage.setItem(\"iru5\", refreshToken);\r\n                setPageLoader(false);\r\n            });\r\n        } catch {\r\n            setPageLoader(false);\r\n        }\r\n    });\r\n\r\n    if (pageLoader) {\r\n        return <>..loading</>;\r\n    } else {\r\n        return <App />;\r\n    }\r\n};\r\n\r\nexport default AppWrapper;\r\n","export interface Product {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n}\r\n\r\nexport interface ProductInCart {\r\n    product_id: number;\r\n    name: string;\r\n    price: number;\r\n    stock: number;\r\n    quantity: number;\r\n}\r\n\r\nexport interface State {\r\n    productsInCart: [\r\n        {\r\n            product_id: number;\r\n            name: string;\r\n            price: number;\r\n            stock: number;\r\n            quantity: number;\r\n        }\r\n    ];\r\n}\r\n\r\nconst loadState = () => {\r\n    try {\r\n        let serializedState = localStorage.getItem(\"store-state\");\r\n        if (serializedState) {\r\n            return JSON.parse(serializedState);\r\n        }\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nconst initState = loadState() || {\r\n    productsInCart: [],\r\n};\r\n\r\ntype Actions = {\r\n    type: string;\r\n    product?: Product;\r\n    newQuantity?: number;\r\n    productIndex?: number;\r\n};\r\n\r\nexport const RootReducer = (state = initState, action: Actions) => {\r\n    switch (action.type) {\r\n        case \"ADD_PRODUCT_TO_CART\": {\r\n            let tmp = state.productsInCart;\r\n\r\n            //if product is already in cart increase quantity instead of adding a new product\r\n            for (let i = 0; i < tmp.length; i++) {\r\n                if (tmp[i].product_id === action.product!.product_id) {\r\n                    tmp[i].quantity++;\r\n                    return { ...state, productsInCart: tmp };\r\n                }\r\n            }\r\n            let tmp2: any = action.product;\r\n            tmp2.quantity = 1;\r\n\r\n            tmp.push(tmp2);\r\n\r\n            return { ...state, productsInCart: tmp };\r\n        }\r\n\r\n        case \"CHANGE_QUANTITY_ON_PRODUCT\": {\r\n            let productsInCart = state.productsInCart;\r\n            if (action.newQuantity === 0) {\r\n                //remove product if quantity is 0\r\n                productsInCart.splice(action.productIndex!, 1);\r\n            } else {\r\n                productsInCart[\r\n                    action.productIndex!\r\n                ].quantity = action.newQuantity!;\r\n            }\r\n            return { ...state, productsInCart };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { RootReducer } from \"./RootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nconst saveState = state => {\r\n    try {\r\n        let serializedState = JSON.stringify(state);\r\n        localStorage.setItem(\"store-state\", serializedState);\r\n    } catch (err) {\r\n        console.log(\"err :>> \", err);\r\n    }\r\n};\r\n\r\nexport const store = createStore(RootReducer as any, composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n","import ReactDOM from \"react-dom\";\nimport AppWrapper from \"./AppWrapper\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport jwtDecode from \"jwt-decode\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport URI from \"./URI\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/ReduxStore\";\n\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink(\n    (operation, forward) =>\n        new Observable(observer => {\n            let handle: any;\n            Promise.resolve(operation)\n                .then(operation => {\n                    const accessToken = getAccessToken();\n                    operation.setContext({\n                        headers: {\n                            authorization: accessToken\n                                ? `bearer ${accessToken}`\n                                : \"\",\n                        },\n                    });\n                })\n                .then(() => {\n                    handle = forward(operation).subscribe({\n                        next: observer.next.bind(observer),\n                        error: observer.error.bind(observer),\n                        complete: observer.complete.bind(observer),\n                    });\n                })\n                .catch(observer.error.bind(observer));\n\n            return () => {\n                if (handle) handle.unsubscribe();\n            };\n        })\n);\n\nconst client = new ApolloClient({\n    link: ApolloLink.from([\n        new TokenRefreshLink({\n            accessTokenField: \"accessToken\",\n            isTokenValidOrUndefined: () => {\n                const token = getAccessToken();\n\n                if (!token) {\n                    return true;\n                }\n\n                try {\n                    const { exp } = jwtDecode(token) as any;\n                    if (Date.now() >= exp * 1000) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                } catch {\n                    return false;\n                }\n            },\n            fetchAccessToken: () => {\n                return fetch(`${URI}/refresh_token`, {\n                    method: \"POST\",\n                    credentials: \"include\",\n                });\n            },\n            handleFetch: (accessToken: string) => {\n                setAccessToken(accessToken);\n            },\n            handleError: (err: any) => {\n                console.warn(\"Your refresh token is invalid. Try to relogin\");\n                console.error(err);\n            },\n        }) as any,\n        onError(({ graphQLErrors, networkError }) => {\n            console.log(graphQLErrors);\n            console.log(networkError);\n        }),\n        requestLink,\n        new HttpLink({\n            uri: `${URI}/graphql`,\n            credentials: \"include\",\n        }),\n    ]),\n    cache,\n});\n\nconsole.log(\"index.tsx\");\nReactDOM.render(\n    <ApolloProvider client={client as any}>\n        <Provider store={store}>\n            <AppWrapper />\n        </Provider>\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}